from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr, Field
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from dotenv import load_dotenv


class OrderPayload(BaseModel):
    customerName: str = Field(..., min_length=1)
    email: EmailStr
    phone: str = Field(..., min_length=7)
    productName: str = Field(..., min_length=1)
    quantity: int = Field(..., gt=0)
    address: str = Field(..., min_length=1)
    payment: str = Field(..., pattern=r"^(COD|ONLINE)$")


load_dotenv()

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/api/health")
def health():
    return {"status": "ok"}


def send_email(subject: str, html_body: str) -> None:
    smtp_host = os.getenv("SMTP_HOST")
    smtp_port = int(os.getenv("SMTP_PORT", "587"))
    smtp_secure = os.getenv("SMTP_SECURE", "false").lower() == "true"
    smtp_user = os.getenv("SMTP_USER")
    smtp_pass = os.getenv("SMTP_PASS")
    mail_to = os.getenv("ORDER_TO") or smtp_user
    mail_from = os.getenv("ORDER_FROM") or smtp_user

    if not smtp_host or not mail_to or not mail_from:
        raise RuntimeError("SMTP configuration missing (SMTP_HOST, ORDER_TO/ORDER_FROM or SMTP_USER)")

    msg = MIMEMultipart("alternative")
    msg["Subject"] = subject
    msg["From"] = mail_from
    msg["To"] = mail_to
    msg.attach(MIMEText(html_body, "html", "utf-8"))

    server: smtplib.SMTP | smtplib.SMTP_SSL
    if smtp_secure:
        server = smtplib.SMTP_SSL(smtp_host, smtp_port)
    else:
        server = smtplib.SMTP(smtp_host, smtp_port)
        server.starttls()

    try:
        if smtp_user and smtp_pass:
            server.login(smtp_user, smtp_pass)
        server.sendmail(mail_from, [mail_to], msg.as_string())
    finally:
        server.quit()


@app.post("/api/orders")
def create_order(payload: OrderPayload):
    order_id = str(os.times().elapsed).replace(".", "")
    subject = f"New Order #{order_id} - {payload.customerName}"
    html = f"""
    <div style='font-family:Segoe UI,Arial,sans-serif;line-height:1.6;color:#0b1e3a;'>
      <h2 style='margin:0 0 8px;'>New Order Received</h2>
      <p style='margin:0 0 12px;color:#5b6b7a;'>Order ID: <strong>{order_id}</strong></p>
      <table style='width:100%;border-collapse:collapse'>
        <tbody>
          <tr><td style='padding:6px 0;width:180px;color:#5b6b7a;'>Customer</td><td><strong>{payload.customerName}</strong></td></tr>
          <tr><td style='padding:6px 0;color:#5b6b7a;'>Email</td><td>{payload.email}</td></tr>
          <tr><td style='padding:6px 0;color:#5b6b7a;'>Phone</td><td>{payload.phone}</td></tr>
          <tr><td style='padding:6px 0;color:#5b6b7a;'>Product</td><td>{payload.productName}</td></tr>
          <tr><td style='padding:6px 0;color:#5b6b7a;'>Quantity</td><td>{payload.quantity}</td></tr>
          <tr><td style='padding:6px 0;color:#5b6b7a;'>Payment</td><td>{payload.payment}</td></tr>
          <tr><td style='padding:6px 0;color:#5b6b7a;'>Delivery Address</td><td>{payload.address.replace('\n','<br/>')}</td></tr>
        </tbody>
      </table>
      <p style='margin-top:16px;color:#5b6b7a;'>This email was generated by the SciTrade website.</p>
    </div>
    """

    try:
        send_email(subject, html)
    except Exception as exc:  # noqa: BLE001
        raise HTTPException(status_code=500, detail="Email send failed") from exc

    return {"ok": True, "orderId": order_id}


